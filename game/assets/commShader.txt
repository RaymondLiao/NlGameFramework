// vs register
float4x4 g_wvp : register(c0);
float4x4 g_world : register(c4);

// ps register
float3 g_lightDir : register(c0);
float3 g_camPos : register(c1);

sampler2D g_tex : register(s0);
sampler2D g_powTex : register(s1);

struct app2vert
{
	float3 pos :      POSITION;
	float3 normal :   NORMAL;
	float2 texcoord : TEXCOORD;
};

struct vert2frag
{
	float4 pos :      POSITION;
	float3 normal :   TEXCOORD0;
	float3 worldpos : TEXCOORD1;
	float2 texcoord : TEXCOORD2;
};

struct fragout
{
	float4 color : COLOR0;
};

vert2frag vs_main( app2vert IN )
{
	vert2frag OUT = (vert2frag)0;
	OUT.pos = mul( g_wvp, float4(IN.pos.xyz, 1.0));
		
	float3 normal = mul( g_world, float4(IN.normal, 0)).xyz;
	normal = normalize(normal);
	OUT.normal = normal;
	
	float3 worldpos = mul( g_world, float4(IN.pos, 1)).xyz;
	OUT.worldpos = worldpos;
	
	OUT.texcoord = IN.texcoord;
	
	return OUT;
};

float phong( in float3 light, in float3 normal, in float3 view, in float gloss )
{
	float spec = 0;
	
	float3 refl = reflect( light, normal );
	refl = normalize(refl);
	spec = pow( saturate( dot(view, refl) ), 150 );
	
	return spec;
}

float blinn( in float3 light, in float3 normal, in float3 view, in float gloss )
{
	float spec = 0;
	
	float3 half = -view + light;
	half = normalize(half);
	spec = pow( saturate( dot(half, normal) ), 150 );
	
	return spec;
}

fragout ps_main( vert2frag IN )
{
	fragout OUT;
	
	float3 light = normalize(g_lightDir);
	
	float3 normal = normalize(IN.normal);
	float ndotl = saturate( dot(light, normal) );
	

	
	float3 view = g_camPos - IN.worldpos;
	view = normalize(-view);
	
	float spec = blinn(light, normal, view, 150);
	
	// environment refl
	float fresnel = 1.0 - saturate( dot( -view, normal ) );
	spec += pow( fresnel, 2.0 );
	
	
	// light inten
	float3 colorrgb = ndotl * 1.0;
	
	colorrgb += 0.25;
	
	float3 colortex = tex2D( g_tex, IN.texcoord.xy );
	colorrgb *= colortex;
	
	float spec_power = tex2D( g_powTex, IN.texcoord.xy);
	spec *= spec_power;

	OUT.color = float4(colorrgb, 0.5);
	OUT.color += spec * 1.0;
	return OUT;
};
